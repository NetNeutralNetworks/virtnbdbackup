#!/usr/bin/python3
"""
    Copyright (C) 2021  Michael Ablassmeier <abi@grinser.de>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
import os
import sys
import shutil
import tempfile
import signal
from functools import partial
import json
import time
import argparse
import logging
import subprocess

from libvirtnbdbackup import __version__
from libvirtnbdbackup import common
from libvirtnbdbackup.sparsestream import streamer
from libvirtnbdbackup.sparsestream import types
from libvirtnbdbackup.sparsestream import exceptions


def checkRequirements():
    """Check if required utils are installed"""
    for exe in ("nbdkit", "qemu-nbd"):
        if not shutil.which(exe):
            logging.error("Please install required [%s] utility.", exe)
            sys.exit(1)


def checkDevice(device):
    """Check if /dev/nbdX exists, otherwise it is likely
    nbd module isnt loaded on the system"""
    if not os.path.exists(device):
        logging.error(
            "Target device [%s] does not exist, nbd module not loaded?", device
        )
        sys.exit(1)


def locatePlugin():
    """Attempt to locate the nbdkit plugin that is passed to the
    nbdkit process"""
    pluginFileName = "virtnbd-nbdkit-plugin"
    installDir = os.path.dirname(sys.argv[0])
    nbdkitModule = f"{installDir}/{pluginFileName}"

    if not os.path.exists(nbdkitModule):
        logging.error("Unable to locate nbdkit plugin: %s", pluginFileName)
        sys.exit(1)

    return nbdkitModule


def handleSignal(nbdkitProcess, device, blockMap, log, signum, _):
    """Catch signal, attempt to stop processes."""
    log.info("Received signal: [%s]", signum)
    disconnectDevice = subprocess.run(
        ["qemu-nbd", "-d", f"{device}"], stdout=subprocess.PIPE
    )
    if disconnectDevice.returncode == 0:
        log.info("Disconnected nbd device [%s]", device)
    log.info("Stopping nbdkit process, pid: [%s]", nbdkitProcess.pid)
    nbdkitProcess.kill()
    log.info("Removing temporary blockmap file: [%s]", blockMap.name)
    os.remove(blockMap.name)
    sys.exit(0)


def getDataRanges(lib, stream, sTypes, reader):
    """Read block offsets from backup stream image"""
    try:
        kind, start, length = stream.readFrame(reader)
        meta = stream.loadMetadata(reader.read(length))
    except exceptions.StreamFormatException as errmsg:
        logging.error("Unable to read metadata header: %s", errmsg)
        return False, False

    if lib.isCompressed(meta):
        logging.error("Mapping compressed images currently not supported.")
        return False, False

    assert reader.read(len(sTypes.TERM)) == sTypes.TERM

    dataRanges = []
    while True:
        kind, start, length = stream.readFrame(reader)
        if kind == sTypes.STOP:
            dataRanges[-1]["nextBlockOffset"] = None
            break

        blockInfo = {}
        blockInfo["offset"] = reader.tell()
        blockInfo["originalOffset"] = start
        blockInfo["nextOriginalOffset"] = start + length
        blockInfo["length"] = length
        blockInfo["data"] = kind == sTypes.DATA
        blockInfo["file"] = reader.name
        blockInfo["inc"] = meta["incremental"]

        if kind == sTypes.DATA:
            reader.seek(length, os.SEEK_CUR)
            assert reader.read(len(sTypes.TERM)) == sTypes.TERM

        nextBlockOffset = reader.tell() + sTypes.FRAME_LEN
        blockInfo["nextBlockOffset"] = nextBlockOffset
        dataRanges.append(blockInfo)

    return dataRanges, meta


def dumpBlockMap(tfile, dataRanges):
    """Dump block map to temporary file"""
    try:
        tfile.write(json.dumps(dataRanges, indent=4).encode())
        return True
    except OSError as e:
        logging.error("Unable to write blockmap file: %s", e)
        return False


def main():
    """Map full backup file to nbd device for single file or
    instant recovery"""
    parser = argparse.ArgumentParser(
        description="Map backup image to block device",
        epilog=(
            "Examples:\n"
            "   # Map full backup to device /dev/nbd0:\n"
            f"\t%(prog)s -f /backup/sda.full.data\n"
            "   # Map full backup to device /dev/nbd2:\n"
            f"\t%(prog)s -f /backup/sda.full.data -d /dev/nbd2\n"
        ),
        formatter_class=argparse.RawTextHelpFormatter,
    )
    opt = parser.add_argument_group("General options")
    opt.add_argument("-f", "--file", required=True, type=str, help="Backup file")
    opt.add_argument(
        "-b",
        "--blocksize",
        required=False,
        type=str,
        default="4096",
        help="Maximum blocksize passed to nbdkit. (default: %(default)s)",
    )
    opt.add_argument(
        "-d",
        "--device",
        default="/dev/nbd0",
        type=str,
        help="Target device. (default: %(default)s)",
    )
    opt.add_argument(
        "-e",
        "--export-name",
        default="sda",
        type=str,
        help="Export name passed to nbdkit. (default: %(default)s)",
    )
    opt.add_argument(
        "-t",
        "--threads",
        default=1,
        type=str,
        help="Amount of threads passed to nbdkit process. (default: %(default)s)",
    )
    opt.add_argument(
        "-l",
        "--listen-address",
        default="127.0.0.1",
        type=str,
        help="IP Address for nbdkit process to listen on. (default: %(default)s)",
    )
    debopt = parser.add_argument_group("Debug options")
    debopt.add_argument(
        "-v",
        "--verbose",
        required=False,
        action="store_true",
        help="Enable debug output",
    )

    lib = common.Common()
    args = lib.argparse(parser)

    logging.basicConfig(
        level=lib.setLogLevel(args.verbose),
        handlers=[logging.FileHandler("virtnbdmap.log"), logging.StreamHandler()],
        format=lib.logFormat,
        datefmt=lib.logDateFormat,
    )

    lib.printVersion(__version__)
    nbdkitModule = locatePlugin()
    logging.info("Using %s as nbdkit plugin", nbdkitModule)

    checkRequirements()
    checkDevice(args.device)

    stream = streamer.SparseStream(types)
    sTypes = types.SparseStreamTypes()

    blockMap = tempfile.NamedTemporaryFile(delete=False, prefix="block.", suffix=".map")
    logging.info("Write blockmap to temporary file: [%s]", blockMap.name)

    dataRanges = []
    dataFiles = args.file.split(",")
    for file in dataFiles:
        try:
            reader = open(file, "rb")
        except OSError as e:
            logging.fatal("Unable to open backup file: [%s]", e)
            sys.exit(1)

        ranges, meta = getDataRanges(lib, stream, sTypes, reader)
        dataRanges.extend(ranges)
        if ranges is False or meta is False:
            logging.error("Unable to read meta header from backup file.")
            sys.exit(1)

        if args.verbose is True:
            logging.info(json.dumps(dataRanges, indent=4))
        else:
            logging.info(
                "Parsed [%s] block offsets from file [%s]", len(dataRanges), file
            )
    reader.close()

    dumpBlockMap(blockMap, dataRanges)
    blockMap.flush()
    blockMap.close()

    logging.info("Target device: %s", args.device)

    nbdkitLog = tempfile.NamedTemporaryFile(
        delete=False, prefix="nbdkit.", suffix=".log"
    )
    logging.info("Starting nbdkit process, logfile: [%s]", nbdkitLog.name)
    nbdkitCmd = [
        "nbdkit",
        "-i",
        f"{args.listen_address}",
        "-e",
        f"{args.export_name}",
        "--filter=blocksize",
        "--filter=cow",
        "-f",
        "-v",
        "python",
        f"{nbdkitModule}",
        f"maxlen={args.blocksize}",
        f"blockmap={blockMap.name}",
        f"disk={args.file}",
        "-t",
        f"{args.threads}",
    ]
    logging.debug(" ".join(nbdkitCmd))
    nbdkitProcess = subprocess.Popen(
        nbdkitCmd,
        close_fds=True,
        stdout=nbdkitLog,
        stderr=nbdkitLog,
    )

    if nbdkitProcess.returncode is None:
        logging.info("Started nbdkit process pid: [%s]", nbdkitProcess.pid)
        signal.signal(
            signal.SIGINT,
            partial(handleSignal, nbdkitProcess, args.device, blockMap, logging),
        )
    else:
        logging.error(
            "Error starting nbdkit process, error code: [%s]", nbdkitProcess.returncode
        )
        logging.error("Stderr: [%s]", nbdkitProcess.stderr)
        logging.error("Stdout: [%s]", nbdkitProcess.stdout)
        sys.exit(1)

    maxRetry = 10
    retryCnt = 0
    while True:
        try:
            subprocess.run(
                [
                    "qemu-nbd",
                    "-c",
                    f"{args.device}",
                    f"nbd://127.0.0.1:10809/{args.export_name}",
                    "-f",
                    "raw",
                ],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                check=True,
            )
            break
        except subprocess.CalledProcessError as e:
            if retryCnt >= maxRetry:
                logging.info(
                    "Unable to connect device after service start: %s",
                    e.stderr.decode(),
                )
                nbdkitProcess.kill()
                sys.exit(1)
            errMsg = e.stderr.decode()
            if "Connection refused" in errMsg:
                logging.info("Nbd server refused connection, retry [%s]", retryCnt)
                time.sleep(1)
                retryCnt += 1
            else:
                logging.error("Unable to map device:")
                logging.error("Stderr: [%s]", errMsg)
                nbdkitProcess.kill()
                sys.exit(1)

    if len(dataFiles) > 1:
        logging.info("Need to replay incremental backups")
        blockListInc = list(
            filter(
                lambda x: x["inc"] is True,
                dataRanges,
            )
        )
        with open(args.device, "wb") as replayDevice:
            for extent in blockListInc:
                logging.info(
                    "Replaying offset %s from %s", extent["offset"], extent["file"]
                )
                with open(extent["file"], "rb") as replaySrc:
                    replaySrc.seek(extent["offset"])
                    replayDevice.seek(extent["originalOffset"])
                    replayDevice.write(replaySrc.read(extent["length"]))
                replayDevice.seek(0)
                replayDevice.flush()

    logging.info("Done mapping backup image to [%s]", args.device)
    logging.info("Press CTRL+C to disconnect")
    while True:
        time.sleep(60)


if __name__ == "__main__":
    main()
