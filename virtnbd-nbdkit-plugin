"""
    Copyright (C) 2021  Michael Ablassmeier <abi@grinser.de>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
 """
import os
import builtins
import json
import pprint
import nbdkit

API_VERSION = 2

blockMap = None
blockMapFile = None
image = None


def config(key, value):
    """Read parameter values, needs to use open function via
    builtins as the python plugin itself defines it again"""
    global blockMap
    global blockMapFile
    global image
    if key == "blockmap":
        blockMapFile = value
        with builtins.open(blockMapFile, "rb") as fh:
            blockMap = json.loads(fh.read())
        return
    if key == "disk":
        image = value
        return

    raise RuntimeError(f"Unsupported parameter: {key}")


def config_complete():
    """Check if we have all required parameters"""
    global image
    global blockMap
    global blockMapFile
    if image is None or blockMap is None:
        raise RuntimeError(
            "Missing parameter: path to block list file and disk required."
        )

    if not os.path.exists(image):
        raise RuntimeError(f"Cant find image file: {image}")
    if not os.path.exists(blockMapFile):
        raise RuntimeError(f"Cant find image file: {blockMapFile}")

    pprint.pprint(blockMap)


def thread_model():
    return nbdkit.THREAD_MODEL_PARALLEL


def open(readonly):
    """Open backup file and return FD"""
    if readonly:
        flags = os.O_RDONLY
    else:
        flags = os.O_RDWR
    fd = os.open(image, flags)
    return {"fd": fd}


def close(param):
    return 1


def get_size(h):
    """Loop through the metadata and calculate the complete
    virtual disk size"""
    global blockMap
    size = 0
    for m in blockMap:
        size += m["length"]
    nbdkit.debug(f"DISK SIZE: {size}")
    return size


def pread(h, buf, offset, flags):
    """Return the right data during read operation.

    Function uses the generated block map to check where
    in the stream format the required block offset is to
    be found and maps it accordingly and returns requested
    data.

    There might be situations where this goes really wrong
    and usually this results in an non-readable disk image.
    By using the blockfilter plugin, it "should" work most
    of the time, because the requested block size does
    not span amongst multiple frames within the sparse
    backup format.. as it should match the physical
    sector size .. hopefully
    """
    global blockMap

    # get block where offset sort of matches
    data = bytearray()
    blockList = list(filter(lambda x: x["originalOffset"] <= offset, blockMap))
    if len(blockList) == 1:
        block = blockList[0]
    else:
        block = blockList[-1]

    nbdkit.debug(f"{block}")

    fileOffset = block["offset"] - block["originalOffset"] + offset

    dataRange = fileOffset + len(buf)
    blockRange = fileOffset + block["length"]
    isData = block["data"]
    nbdkit.debug(f"READ AT: {fileOffset}")
    nbdkit.debug(f"READ: {len(buf)}")
    nbdkit.debug(f"DATA-RANGE: {dataRange}")
    nbdkit.debug(f"BLOCK-RANGE: {blockRange}")

    if block["nextBlockOffset"] is None:
        nbdkit.debug("Data is within last block")
        if isData is False:
            data += b"\0" * len(buf)
        else:
            data += os.pread(h["fd"], len(buf), fileOffset)
    else:
        if dataRange < blockRange:
            if isData is False:
                nbdkit.debug("handle zero")
                data += b"\0" * len(buf)
            else:
                nbdkit.debug("can read everything")
                data += os.pread(h["fd"], len(buf), fileOffset)
                nbdkit.debug(f"received: {len(data)}")
        else:
            raise RuntimeError("Unexpected block range size.")

    if len(data) != len(buf):
        raise RuntimeError("Unexpected short read from file.")

    buf[:] = data
