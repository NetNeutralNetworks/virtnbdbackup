#!/usr/bin/python3
"""
    Copyright (C) 2021 Michael Ablassmeier <abi@grinser.de>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
import os
import sys
import shutil
import logging
import argparse
import pprint

from libvirtnbdbackup import __version__
from libvirtnbdbackup import common
from libvirtnbdbackup import nbdhelper
from libvirtnbdbackup import libvirthelper
from libvirtnbdbackup import qemuhelper
from libvirtnbdbackup import exceptions as baseexception
from libvirtnbdbackup.sparsestream import streamer
from libvirtnbdbackup.sparsestream import types
from libvirtnbdbackup.sparsestream import exceptions


def dump(lib, args, stream, dataFiles):
    """Dump stream contents to json output"""
    logging.info("Dumping saveset meta information")
    for dataFile in dataFiles:
        if args.disk is not None and not os.path.basename(dataFile).startswith(
            args.disk
        ):
            continue
        logging.info(dataFile)

        sourceFile = dataFile
        if args.sequence:
            sourceFile = f"{args.input}/{dataFile}"
        meta = getHeader(lib, sourceFile, stream)

        if not meta:
            return False

        pprint.pprint(meta)

        if lib.isCompressed(meta):
            logging.info("Compressed stream found: %s", meta["compressionMethod"])

    return True


def restoreData(lib, args, stream, dataFile, targetFile, nbdClient, connection):
    """Restore data for disk"""
    try:
        reader = open(dataFile, "rb")
    except OSError as errmsg:
        logging.critical("Unable to open backup file for reading: %s", errmsg)
        return False

    sTypes = types.SparseStreamTypes()

    try:
        kind, start, length = stream.readFrame(reader)
        meta = stream.loadMetadata(reader.read(length))
    except exceptions.StreamFormatException as errmsg:
        logging.fatal(errmsg)
        raise baseexception.RestoreError from errmsg

    if lib.isCompressed(meta) is True:
        trailer = stream.readCompressionTrailer(reader)
        logging.info("Found compression trailer")
        logging.debug("%s", trailer)
    else:
        trailer = None

    if meta["dataSize"] == 0:
        logging.info("Saveset %s contains no dirty blocks, skipping", dataFile)
        return True

    logging.info(
        "Applying data from backup file [%s] to target file [%s]", dataFile, targetFile
    )
    pprint.pprint(meta)
    assert reader.read(len(sTypes.TERM)) == sTypes.TERM

    progressBar = lib.progressBar(
        meta["dataSize"], f"restoring disk [{meta['diskName']}]", args
    )
    dataSize = 0
    dataBlockCnt = 0
    while True:
        try:
            kind, start, length = stream.readFrame(reader)
        except exceptions.StreamFormatException as err:
            logging.error("Cant read stream at pos: %s: %s", reader.tell(), err)
            raise baseexception.RestoreError from err
        if kind == sTypes.ZERO:
            logging.debug("Write zero segment from %s length: %s", start, length)
            if length >= nbdClient.maxRequestSize:
                logging.debug("Chunked zero, start: %s, len: %s", start, length)
                lib.zeroChunk(start, length, nbdClient.maxRequestSize, connection)
            else:
                connection.zero(length, start)
        elif kind == sTypes.DATA:
            logging.debug("Process data segment from %s length: %s", start, length)

            originalSize = length
            if trailer:
                logging.debug("Block: %s", dataBlockCnt)
                logging.debug("Original block size: %s", length)
                length = trailer[dataBlockCnt]
                logging.debug("Compressed block size: %s", length)

            if originalSize >= nbdClient.maxRequestSize:
                logging.debug("Chunked read/write, start: %s, len: %s", start, length)
                try:
                    written = lib.readChunk(
                        reader,
                        start,
                        length,
                        nbdClient.maxRequestSize,
                        connection,
                        lib.isCompressed(meta),
                    )
                except Exception as e:
                    raise baseexception.RestoreError from e
                logging.debug("Wrote: %s", written)
            else:
                try:
                    data = reader.read(length)
                    if lib.isCompressed(meta):
                        data = lib.lz4DecompressFrame(data)
                    connection.pwrite(data, start)
                    written = len(data)
                except Exception as e:
                    raise baseexception.RestoreError from e

            assert reader.read(len(sTypes.TERM)) == sTypes.TERM
            dataSize += originalSize
            progressBar.update(written)
            dataBlockCnt += 1
        elif kind == sTypes.STOP:
            progressBar.close()
            if dataSize != meta["dataSize"]:
                logging.error(
                    "Error: restored data size %s != %s",
                    dataSize,
                    meta["dataSize"],
                )
                raise baseexception.RestoreError
            break

    logging.info("End of stream, %s bytes of data processed", dataSize)
    if meta["checkpointName"] == args.until:
        logging.info("Reached checkpoint %s, stopping", args.until)
        raise baseexception.UntilCheckpointReached

    return True


def restoreSequence(lib, args, dataFiles):
    """Reconstruct image from a given set of data files"""
    stream = streamer.SparseStream(types)

    for disk in dataFiles:
        sourceFile = f"{args.input}/{disk}"

        meta = getHeader(lib, sourceFile, stream)
        if not meta:
            return False

        targetFile = f"{args.output}/{meta['diskName']}"

        if not os.path.exists(targetFile):
            if not createDiskFile(meta, targetFile=targetFile):
                return False

        diskName = meta["diskName"]

        qFh = qemuhelper.qemuHelper(diskName)

        socketFile = lib.getSocketFile(args.socketfile)
        nbdClient, connection = startNbd(qFh, diskName, targetFile, socketFile)

        result = writeData(
            lib, args, stream, sourceFile, targetFile, nbdClient, connection
        )

        nbdClient.disconnect()

    return result


def writeData(lib, args, stream, disk, targetFile, nbdClient, connection):
    """Restore the data stream to the target file"""
    diskState = False
    diskState = restoreData(lib, args, stream, disk, targetFile, nbdClient, connection)
    # no data has been processed
    if diskState is None:
        diskState = True

    return diskState


def createDiskFile(meta, targetFile, diskFormat="qcow2"):
    """Create target image file"""
    logging.info("Create virtual Disk [%s] format: [%s]", targetFile, diskFormat)
    logging.info("Virtual Size: [%s]", meta["virtualSize"])
    qFh = qemuhelper.qemuHelper(meta["diskName"])

    try:
        qFh.create(targetFile, meta["virtualSize"], diskFormat)
    except Exception as e:
        logging.error("Cant create restore target: %s", e)
        return False

    return True


def getHeader(lib, diskFile, stream):
    """Read header from data file"""
    try:
        return lib.dumpMetaData(diskFile, stream)
    except exceptions.StreamFormatException as errmsg:
        logging.error("Reading metadata from %s failed: %s", diskFile, errmsg)
        return False
    except OSError as errmsg:
        logging.error("Reading data file %s failed: %s", diskFile, errmsg)
        return False


def startNbd(qFh, exportName, targetFile, socketFile):
    """Start NBD service for restore"""
    logging.info("Starting NBD server on socket: [%s]", socketFile)
    err = qFh.startRestoreNbdServer(targetFile, socketFile)
    if err is not None:
        logging.error("Unable to start NBD server: [%s]", err)
        return False

    nbdClient = nbdhelper.nbdClient(exportName, None, socketFile)
    return nbdClient, nbdClient.waitForServer()


def readConfig(vmConfig):
    """Read saved virtual machine config'"""
    try:
        with open(vmConfig, "rb") as vmConf:
            config = vmConf.read().decode()
        return config
    except OSError as errmsg:
        logging.error("Cant open config file: [%s]: [%s]", vmConfig, errmsg)
        return False


def getDisksFromConfig(args, vmConfig):
    """Parse disk information from latest config file
    contained in the backup directory
    """
    config = readConfig(vmConfig)
    return libvirthelper.client().getDomainDisks(args, config)


def checkBackingStore(disk):
    """If an virtual machine was running on an snapshot image,
    warn user, the virtual machine configuration has to be
    adjusted before starting the VM is possible"""
    if len(disk.backingstores) > 0:
        logging.warning(
            "Target image [%s] seems to be a snapshot image.", disk.filename
        )
        logging.warning("Target virtual machine configuration must be altered!")
        logging.warning("Configured backing store images must be changed.")


def checkAdditional(args, lib, vmConfig):
    """Notice user if backed up vm had loader / nvram"""
    config = readConfig(vmConfig)
    info = libvirthelper.client().getDomainInfo(config)

    if info.loader:
        s = os.path.basename(info.loader)
        loader = lib.getLatest(args.input, f"*{s}*", -1)
        logging.warning(
            "Domain config includes loader: [%s]: "
            "Loader file [%s] must be copied manually.",
            info.loader,
            loader,
        )

    if info.nvram:
        s = os.path.basename(info.nvram)
        nvram = lib.getLatest(args.input, f"*{s}*", -1)
        logging.warning(
            "Domain config includes NVRAM: [%s]: "
            "Loader file [%s] must be copied manually.",
            info.nvram,
            nvram,
        )


def setTargetFile(args, disk):
    """Based on disk information, set target file
    to write"""
    if disk.filename is not None:
        targetFile = f"{args.output}/{disk.filename}"
    else:
        targetFile = f"{args.output}/{disk.target}"

    return targetFile


def restore(lib, args, vmConfig):
    """Handle restore operation"""
    stream = streamer.SparseStream(types)
    vmDisks = getDisksFromConfig(args, vmConfig)
    if not vmDisks:
        return False

    for disk in vmDisks:
        checkBackingStore(disk)
        if args.disk not in (None, disk.target):
            logging.info("Skipping disk %s for restore", disk.target)
            continue

        restoreDisk = lib.getLatest(args.input, f"{disk.target}*.data")
        logging.debug("Restoring disk: %s", restoreDisk)
        if len(restoreDisk) < 1:
            logging.warning("No backup file for disk [%s] found.", disk.target)
            continue

        targetFile = setTargetFile(args, disk)

        if args.raw and disk.format == "raw":
            logging.info("Copy raw image to %s", targetFile)
            try:
                shutil.copy(restoreDisk[0], targetFile)
                continue
            except shutil.Error as errmsg:
                logging.error("Unable to copy raw image: %s", errmsg)

        if "full" not in restoreDisk[0] and "copy" not in restoreDisk[0]:
            logging.error(
                "%s Unable to locate base full or copy backup.", restoreDisk[0]
            )
            return False

        meta = getHeader(lib, restoreDisk[0], stream)
        if not meta:
            logging.error("Reading metadata from %s failed", restoreDisk[0])
            return False

        qFh = qemuhelper.qemuHelper(meta["diskName"])
        if not createDiskFile(meta, targetFile, disk.format):
            return False

        socketFile = lib.getSocketFile(args.socketfile)
        nbdClient, connection = startNbd(qFh, meta["diskName"], targetFile, socketFile)

        result = False
        for dataFile in restoreDisk:
            try:
                result = writeData(
                    lib, args, stream, dataFile, targetFile, nbdClient, connection
                )
            except baseexception.UntilCheckpointReached:
                result = True
                break
            except baseexception.RestoreError:
                result = False
                break
    return result


def main():
    """main function"""
    parser = argparse.ArgumentParser(description="Restore virtual machine disks")
    opt = parser.add_argument_group("General options")
    opt.add_argument(
        "-a",
        "--action",
        required=True,
        type=str,
        choices=["dump", "restore"],
        help="Action to perform",
    )
    opt.add_argument(
        "-i",
        "--input",
        required=True,
        type=str,
        help="Directory including a backup set",
    )
    opt.add_argument(
        "-o", "--output", required=True, type=str, help="Restore target directory"
    )
    opt.add_argument(
        "-u",
        "--until",
        required=False,
        type=str,
        help="Restore only until checkpoint, point in time restore.",
    )
    opt.add_argument(
        "-s",
        "--sequence",
        required=False,
        type=str,
        default=None,
        help="Restore image based on specified backup files.",
    )
    opt.add_argument(
        "-d",
        "--disk",
        required=False,
        type=str,
        default=None,
        help="Process only disk matching target dev name. (default: %(default)s)",
    )
    opt.add_argument(
        "-n",
        "--noprogress",
        required=False,
        action="store_true",
        default=False,
        help="Disable progress bar",
    )
    opt.add_argument(
        "-f",
        "--socketfile",
        default=None,
        type=str,
        help="Use specified file for NBD Server socket instead of random file",
    )
    opt.add_argument(
        "-r",
        "--raw",
        default=False,
        action="store_true",
        help="Copy raw images as is during restore. (default: %(default)s)",
    )
    debopt = parser.add_argument_group("Debug options")
    debopt.add_argument(
        "-v",
        "--verbose",
        required=False,
        action="store_true",
        default=False,
        help="Enable debug output",
    )

    lib = common.Common()
    args = lib.argparse(parser)

    # default values for common usage of lib.getDomainDisks
    args.exclude = None
    args.include = args.disk

    stream = streamer.SparseStream(types)

    logging.basicConfig(
        level=lib.setLogLevel(args.verbose),
        handlers=[logging.FileHandler("virtnbdrestore.log"), logging.StreamHandler()],
        format=lib.logFormat,
        datefmt=lib.logDateFormat,
    )

    lib.printVersion(__version__)

    if not os.path.exists(args.input):
        logging.error("Backup set directory does not exist.")
        sys.exit(1)

    if args.sequence is not None:
        logging.info("Using manual specified sequence of files.")
        dataFiles = args.sequence.split(",")

        if "full" not in dataFiles[0]:
            logging.error("Sequence must start with full backup.")
            sys.exit(1)
    else:
        dataFiles = lib.getLatest(args.input, "*.data")

        if not dataFiles:
            logging.error("No data files found in directory: %s", args.input)
            sys.exit(1)

    if args.action == "dump":
        dump(lib, args, stream, dataFiles)

    if args.action == "restore":
        vmConfig = lib.getLatest(args.input, "vmconfig*.xml", -1)
        logging.info("Latest config file found: %s", vmConfig)
        if not vmConfig:
            logging.error("No domain config file found")
            sys.exit(1)

        logging.info("Using latest config file: [%s]", vmConfig)

        args.level = "full"
        if not lib.targetIsEmpty(args):
            logging.error("Target directory is not empty.")
            sys.exit(1)

        if not os.path.exists(args.output):
            os.makedirs(args.output)

        ret = False
        if args.sequence is not None:
            ret = restoreSequence(lib, args, dataFiles)
        else:
            ret = restore(lib, args, vmConfig)

        checkAdditional(args, lib, vmConfig)

        if ret is True:
            shutil.copy(vmConfig, args.output)
            logging.info(
                "Copied vm config to [%s/%s]", args.output, os.path.basename(vmConfig)
            )
            logging.info("Note: virtual machine config must be adjusted manually.")
            sys.exit(0)
        else:
            sys.exit(1)


if __name__ == "__main__":
    main()
