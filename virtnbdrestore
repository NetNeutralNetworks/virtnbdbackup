#!/usr/bin/env python3
import os
import sys
import json
import logging
import argparse
import pprint

import libvirtnbdbackup.nbdhelper as nbdhelper
import libvirtnbdbackup.sparsestream  as sparsestream
import libvirtnbdbackup.common as common

def main():
    parser = argparse.ArgumentParser(description='Restore')
    parser.add_argument("-a", "--action", required=True,
        choices=['dump'],
        type=str,
        help="Actions")
    parser.add_argument("-i", "--input", required=True,
        type=str,
        help="Directory including a backup set")
    parser.add_argument("-v", "--verbose", required=False,
        action="store_true",
        default=False,
        help="Directory including a backup set")

    try:
        args = parser.parse_args()
    except:
        parser.print_help()
        sys.exit(1)

    logger = logging
    if args.verbose == True:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger.basicConfig(level=level)

    lib = common.Common()
    if args.action == "dump":
        logger.info("Dumping saveset meta information")
        dataFiles = lib.getDataFiles(args.input)
        for dataFile in dataFiles:
            with open(dataFile, 'rb') as reader:
                kind, start, length = sparsestream.SparseStream().read_frame(reader)
                meta = sparsestream.SparseStream().load_metadata(reader.read(length))
                pprint.pprint(meta)

if __name__ == "__main__":
    main()

sys.exit(1)

#TODO
# restore stream backup format to qcow 2 file using
# 1) create a file with the same size as original:
# qemu-img create -f qcow2 /tmp/RESTORE.qcow2 30G
# 2) attach qemu-nbd process to it:
# qemu-nbd -x vda -f qcow2 /tmp/RESTORE.qcow2
# start restore via:
# ./restorestream < /tmp/BACKUP.sda.data
r = nbd.NBD()
r.set_export_name("vda")
r.connect_tcp('localhost','10809')

reader = sys.stdin.buffer
kind, start, length = sparsestream.SparseStream().read_frame(reader)
meta = sparsestream.SparseStream().load_metadata(reader.read(length))
print(meta)
assert reader.read(len(sparsestream.SparseStreamTypes().TERM)) == sparsestream.SparseStreamTypes().TERM
while True:
    kind, start, length = sparsestream.SparseStream().read_frame(reader)
    if kind == sparsestream.SparseStreamTypes().ZERO:
        print("do zero from %s to %s" % (start, length))
        #r.zero(length, start)
    elif kind == sparsestream.SparseStreamTypes().DATA:
        print("do data, length %s" % length)
        if length >= 33554432:
            assert length % 65536 == 0
            bs = 65536
            count = int(length/bs)
            ct = 1
            offset = start
            while ct <= count:
                ct+=1
                data = reader.read(bs)
                r.pwrite(data, offset)
                offset += 65536
        else:
            data = reader.read(length)
            r.pwrite(data, start)
        assert reader.read(len(sparsestream.SparseStreamTypes().TERM)) == sparsestream.SparseStreamTypes().TERM
    elif kind == sparsestream.SparseStreamTypes().STOP:
        break

r.shutdown()
print("end")
