#!/usr/bin/python3
"""
    Copyright (C) 2021 Michael Ablassmeier <abi@grinser.de>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
import os
import sys
import shutil
import logging
import argparse
import pprint

from libvirtnbdbackup import __version__
from libvirtnbdbackup import common
from libvirtnbdbackup import nbdhelper
from libvirtnbdbackup import libvirthelper
from libvirtnbdbackup import qemuhelper
from libvirtnbdbackup.sparsestream import streamer
from libvirtnbdbackup.sparsestream import types
from libvirtnbdbackup.sparsestream import exceptions


def dump(lib, args, stream, dataFiles):
    """Dump stream contents to json output"""
    logging.info("Dumping saveset meta information")
    for dataFile in dataFiles:
        if args.disk != "all" and not os.path.basename(dataFile).startswith(args.disk):
            continue
        logging.info(dataFile)

        meta = getHeader(lib, dataFile, stream)

        if not meta:
            return False

        pprint.pprint(meta)

        if lib.isCompressed(meta):
            logging.info("Compressed stream found: %s", meta["compressionMethod"])

    return True


def restoreData(lib, args, stream, dataFile, targetFile, nbdClient, connection):
    """Restore data for disk"""
    try:
        reader = open(dataFile, "rb")
    except OSError as errmsg:
        logging.critical("Unable to open backup file for reading: %s", errmsg)
        return False

    sTypes = types.SparseStreamTypes()

    try:
        kind, start, length = stream.readFrame(reader)
        meta = stream.loadMetadata(reader.read(length))
    except exceptions.StreamFormatException as errmsg:
        logging.fatal(errmsg)
        return False

    if lib.isCompressed(meta) is True:
        trailer = stream.readCompressionTrailer(reader)
        logging.info("Found compression trailer")
        logging.debug("%s", trailer)
    else:
        trailer = None

    if meta["checkpointName"] == args.until:
        logging.info("Reached checkpoint %s, stopping", args.until)
        return None

    if meta["dataSize"] == 0:
        logging.info("Saveset %s contains no dirty blocks, skipping", dataFile)
        return True
    logging.info(
        "Applying data from backup file [%s] to target file [%s]", dataFile, targetFile
    )
    pprint.pprint(meta)
    assert reader.read(len(sTypes.TERM)) == sTypes.TERM

    progressBar = lib.progressBar(
        meta["dataSize"], f"restoring disk [{meta['diskName']}]", args
    )
    dataSize = 0
    dataBlockCnt = 0
    while True:
        try:
            kind, start, length = stream.readFrame(reader)
        except exceptions.StreamFormatException as err:
            logging.error("Wrong stream at pos: %s", reader.tell())
            logging.exception(err)
            return False
        if kind == sTypes.ZERO:
            logging.debug("Write zero segment from %s length: %s", start, length)
            if length >= nbdClient.maxRequestSize:
                logging.debug("Chunked zero, start: %s, len: %s", start, length)
                lib.zeroChunk(start, length, nbdClient.maxRequestSize, connection)
            else:
                connection.zero(length, start)
        elif kind == sTypes.DATA:
            logging.debug("Process data segment from %s length: %s", start, length)

            originalSize = length
            if trailer:
                logging.debug("Block: %s", dataBlockCnt)
                logging.debug("Original block size: %s", length)
                length = trailer[dataBlockCnt]
                logging.debug("Compressed block size: %s", length)

            if originalSize >= nbdClient.maxRequestSize:
                logging.debug("Chunked read/write, start: %s, len: %s", start, length)
                try:
                    written = lib.readChunk(
                        reader,
                        start,
                        length,
                        nbdClient.maxRequestSize,
                        connection,
                        lib.isCompressed(meta),
                    )
                except Exception as e:
                    logging.exception(e)
                    return False
                logging.debug("Wrote: %s", written)
            else:
                try:
                    data = reader.read(length)
                    if lib.isCompressed(meta):
                        data = lib.lz4DecompressFrame(data)
                    connection.pwrite(data, start)
                    written = len(data)
                except Exception as e:
                    logging.exception(e)
                    return False

            assert reader.read(len(sTypes.TERM)) == sTypes.TERM
            dataSize += originalSize
            progressBar.update(written)
            dataBlockCnt += 1
        elif kind == sTypes.STOP:
            progressBar.close()
            if dataSize == meta["dataSize"]:
                logging.info("End of stream, %s bytes of data processed", dataSize)
                return True
            logging.error(
                "Error: restored data size %s != %s",
                dataSize,
                meta["dataSize"],
            )
            return False
    return False


def restoreSequence(lib, args, dataFiles):
    """Reconstruct image from a given set of data files"""
    stream = streamer.SparseStream(types)

    for disk in dataFiles:
        sourceFile = f"{args.input}/{disk}"

        meta = getHeader(lib, sourceFile, stream)
        if not meta:
            return False

        targetFile = f"{args.output}/{meta['diskName']}"

        if not os.path.exists(targetFile):
            if not createDiskFile(meta, targetFile=targetFile):
                return False

        diskName = meta["diskName"]

        qFh = qemuhelper.qemuHelper(diskName)

        socketFile = lib.getSocketFile(args.socketfile)
        nbdClient, connection = startNbd(qFh, diskName, targetFile, socketFile)

        result = writeData(
            lib, args, stream, sourceFile, targetFile, nbdClient, connection
        )

        nbdClient.disconnect()

    return result


def writeData(lib, args, stream, disk, targetFile, nbdClient, connection):
    """Restore the data stream to the target file"""
    diskState = False
    diskState = restoreData(lib, args, stream, disk, targetFile, nbdClient, connection)
    # no data has been processed
    if diskState is None:
        diskState = True

    return diskState


def createDiskFile(meta, targetFile, diskFormat="qcow2"):
    """Create target image file"""
    logging.info("Create virtual Disk [%s] format: [%s]", targetFile, diskFormat)
    logging.info("Virtual Size: [%s]", meta["virtualSize"])
    qFh = qemuhelper.qemuHelper(meta["diskName"])

    try:
        qFh.create(targetFile, meta["virtualSize"], diskFormat)
    except Exception as e:
        logging.error("Cant create restore target: %s", e)
        return False

    return True


def getHeader(lib, diskFile, stream):
    """Read header from data file"""
    try:
        return lib.dumpMetaData(diskFile, stream)
    except exceptions.StreamFormatException as errmsg:
        logging.error("Reading metadata from %s failed: %s", diskFile, errmsg)
        return False
    except OSError as errmsg:
        logging.error("Reading data file %s failed: %s", diskFile, errmsg)
        return False


def startNbd(qFh, exportName, targetFile, socketFile):
    logging.info("Starting NBD server on socket: [%s]", socketFile)
    err = qFh.startRestoreNbdServer(targetFile, socketFile)
    if err is not None:
        logging.error("Unable to start NBD server: [%s]", err)
        return False

    nbdClient = nbdhelper.nbdClient(exportName, None, socketFile)
    return nbdClient, nbdClient.waitForServer()


def getDisksFromConfig(args, vmConfig):
    """Parse disk information from latest config file
    contained in the backup directory
    """
    try:
        with open(vmConfig, "rb") as vmConf:
            return libvirthelper.client().getDomainDisks(
                vmConf.read().decode(), None, None, args.raw
            )
    except OSError as errmsg:
        logging.error("Cant open config file: [%s]: [%s]", vmConfig, errmsg)
        return False


def restore(lib, args, vmConfig):
    """Handle restore operation"""
    stream = streamer.SparseStream(types)
    vmDisks = getDisksFromConfig(args, vmConfig)
    if not vmDisks:
        return False

    for disk in vmDisks:
        if len(disk.backingStores) > 0:
            logging.warning(
                "Target image [%s] seems to be a snapshot image.", disk.diskFileName
            )
            logging.warning("Target virtual machine configuration must be altered!")
            logging.warning("Configured backing store images must be changed.")
        if args.disk not in ("all", disk.diskTarget):
            logging.info("Skipping disk %s for restore", disk.diskTarget)
            continue

        restoreDisk = lib.getDataFilesByDisk(args.input, disk.diskTarget)
        logging.debug("Restoring disk: %s", restoreDisk)
        if len(restoreDisk) < 1:
            logging.warning(
                "Did not find any backups for disk image %s", disk.diskTarget
            )
            continue

        if disk.diskFileName is not None:
            targetFile = f"{args.output}/{disk.diskFileName}"
        else:
            targetFile = f"{args.output}/{disk.diskTarget}"

        if args.raw and disk.diskFormat == "raw":
            logging.info("Copy raw image to %s", targetFile)
            try:
                shutil.copy(restoreDisk[0], targetFile)
                continue
            except shutil.Error as errmsg:
                logging.error("Unable to copy raw image: %s", errmsg)

        if "full" not in restoreDisk[0] and "copy" not in restoreDisk[0]:
            logging.error(
                "%s Unable to locate base full or copy backup.", restoreDisk[0]
            )
            return False

        meta = getHeader(lib, restoreDisk[0], stream)
        if not meta:
            logging.error("Reading metadata from %s failed", restoreDisk[0])
            return False

        qFh = qemuhelper.qemuHelper(meta["diskName"])
        if not createDiskFile(meta, targetFile, disk.diskFormat):
            return False

        socketFile = lib.getSocketFile(args.socketfile)
        nbdClient, connection = startNbd(qFh, meta["diskName"], targetFile, socketFile)

        for dataFile in restoreDisk:
            result = writeData(
                lib, args, stream, dataFile, targetFile, nbdClient, connection
            )
            if result is False:
                break

    return result


def main():
    """main function"""
    parser = argparse.ArgumentParser(description="Restore virtual machine disks")
    parser.add_argument(
        "-a",
        "--action",
        required=True,
        type=str,
        choices=["dump", "restore"],
        help="Action to perform",
    )
    parser.add_argument(
        "-i",
        "--input",
        required=True,
        type=str,
        help="Directory including a backup set",
    )
    parser.add_argument(
        "-o", "--output", required=True, type=str, help="Restore target directory"
    )
    parser.add_argument(
        "-u",
        "--until",
        required=False,
        type=str,
        help="Restore only until checkpoint, point in time restore.",
    )
    parser.add_argument(
        "-s",
        "--sequence",
        required=False,
        type=str,
        default=None,
        help="Restore image based on specified backup files.",
    )
    parser.add_argument(
        "-d",
        "--disk",
        required=False,
        type=str,
        default="all",
        help="Process only disk matching target dev name. (default: %(default)s)",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        required=False,
        action="store_true",
        default=False,
        help="Enable debug output",
    )
    parser.add_argument(
        "-n",
        "--noprogress",
        required=False,
        action="store_true",
        default=False,
        help="Disable progress bar",
    )
    parser.add_argument(
        "-f",
        "--socketfile",
        default=None,
        type=str,
        help="Use specified file for NBD Server socket instead of random file",
    )
    parser.add_argument(
        "-r",
        "--raw",
        default=False,
        action="store_true",
        help="Copy raw images as is during restore. (default: %(default)s)",
    )

    lib = common.Common()
    args = lib.argparse(parser)

    stream = streamer.SparseStream(types)

    logging.basicConfig(
        level=lib.setLogLevel(args.verbose),
        handlers=[logging.FileHandler("virtnbdrestore.log"), logging.StreamHandler()],
        format=lib.logFormat,
        datefmt=lib.logDateFormat,
    )

    lib.printVersion(__version__)

    if not os.path.exists(args.input):
        logging.error("Backup set directory does not exist")
        sys.exit(1)

    if args.sequence is not None:
        logging.info("Using manual specified sequence of files")
        dataFiles = args.sequence.split(",")
    else:
        dataFiles = lib.getDataFiles(args.input)

        if not dataFiles:
            logging.error("No data files found in directory: %s", args.input)
            sys.exit(1)

    if args.action == "dump":
        dump(lib, args, stream, dataFiles)

    if args.action == "restore":
        vmConfig = lib.getLastConfigFile(args.input)
        logging.info("Latest config file found: %s", vmConfig)
        if not vmConfig:
            logging.error("No domain config file found")
            sys.exit(1)

        logging.info("Using latest config file: [%s]", vmConfig)

        args.level = "full"
        if not lib.targetIsEmpty(args):
            logging.error("Target directory is not empty.")
            sys.exit(1)

        if not os.path.exists(args.output):
            os.makedirs(args.output)

        ret = False
        if args.sequence is not None:
            ret = restoreSequence(lib, args, dataFiles)
        else:
            ret = restore(lib, args, vmConfig)

        if ret is True:
            shutil.copy(vmConfig, args.output)
            logging.info(
                "Copied vm config to [%s/%s]", args.output, os.path.basename(vmConfig)
            )
            logging.info("Note: virtual machine config must be adjusted manually.")
            sys.exit(0)
        else:
            sys.exit(1)


if __name__ == "__main__":
    main()
