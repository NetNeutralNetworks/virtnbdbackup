#!/usr/bin/python3
"""
    Copyright (C) 2021 Michael Ablassmeier <abi@grinser.de>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
"""
import os
import sys
import logging
import argparse
import pprint
from time import sleep
from tqdm import tqdm

import libvirtnbdbackup.common as common
import libvirtnbdbackup.nbdhelper as nbdhelper
import libvirtnbdbackup.libvirthelper as virtclient
import libvirtnbdbackup.sparsestream  as sparsestream
import libvirtnbdbackup.qemuhelper as qemuhelper

from libvirtnbdbackup import __version__

def main():
    parser = argparse.ArgumentParser(
        description="Restore virtual machine disks"
    )
    parser.add_argument(
        "-a", "--action", required=True, type=str,
        choices=["dump","restore"],
        help="Action to perform")
    parser.add_argument(
        "-i", "--input", required=True, type=str,
        help="Directory including a backup set")
    parser.add_argument(
        "-o", "--output", required=True, type=str,
        help="Restore target directory")
    parser.add_argument(
        "-u", "--until", required=False, type=str,
        help="Restore only until checkpoint, point in time restore")
    parser.add_argument(
        "-d", "--disk", required=False, type=str,
        default="all",
        help="Process only disk matching target dev name")
    parser.add_argument(
        "-v", "--verbose", required=False,
        action="store_true", default=False,
        help="Enable debug output")
    parser.add_argument(
        "-n", "--noprogress", required=False,
        action="store_true", default=False,
        help="Disable progress bar")
    parser.add_argument(
        "-f", "--socketfile", default=None, type=str,
        help="Use specified file for NBD Server socket instead of random file")

    lib = common.Common()
    args = lib.argparse(parser)

    logging.basicConfig(
        level=lib.setLogLevel(args.verbose),
        handlers=[
            logging.FileHandler("virtnbdrestore.log"),
            logging.StreamHandler()
        ],
        format=lib.logFormat,
        datefmt=lib.logDateFormat
    )

    lib.printVersion(__version__)

    if not os.path.exists(args.input):
        logging.error("Backup set directory does not exist")
        sys.exit(1)

    if args.action == "dump":
        logging.info("Dumping saveset meta information")
        dataFiles = lib.getDataFiles(args.input)
        if not dataFiles:
            logging.error("No data files found in directory: %s", args.input)
            sys.exit(1)
        for dataFile in dataFiles:
            if args.disk != "all" and not os.path.basename(
                    dataFile
            ).startswith(args.disk):
                continue
            meta = lib.dumpMetaData(dataFile, sparsestream)
            if meta is False:
                logging.error(
                    "Unable to dump image contents, image defunct or raw image?"
                )
                continue
            pprint.pprint(meta)

    if args.action == "restore":
        logging.info("Read latest config file")
        vmConfig = lib.getLastConfigFile(args.input)
        if not vmConfig:
            logging.error("No domain config file found")
            sys.exit(1)

        with open(vmConfig,"r") as vmConf:
            vmDisks = virtclient.client().getDomainDisks(
                vmConf.read(),
                None,
                False
            )

        for disk in vmDisks:
            if args.disk != "all" and args.disk != disk.diskTarget:
                logging.info("Skipping disk %s for restore", disk.diskTarget)
                continue

            restoreDisk = lib.getDataFilesByDisk(args.input, disk.diskTarget)
            logging.debug(restoreDisk)
            if len(restoreDisk) < 1:
                logging.warning(
                    "Did not find any backups for disk image %s",
                    disk.diskTarget
                )
                continue
            if not "full" in restoreDisk[0] and not "copy" in restoreDisk[0]:
                logging.error("%s Unable to locate base full or copy backup.", restoreDisk[0])
                sys.exit(1)
            try:
                meta = lib.dumpMetaData(restoreDisk[0], sparsestream)
            except Exception as e:
                logging.error(
                    "Reading metadata from %s failed: %s",
                    restoreDisk[0],
                    e
                )
                sys.exit(1)
            logging.info(
                "Create virtual Disk %s/%s",
                args.output,
                meta["diskName"]
            )
            logging.info("Virtual Size %s", meta["virtualSize"])
            qFh = qemuhelper.qemuHelper(meta["diskName"])

            try:
                qFh.create(args.output, meta["virtualSize"], disk.diskFormat)
            except Exception as e:
                logging.error("Cant create restore target: %s", e)
                sys.exit(1)

            socketFile = lib.getSocketFile(args.socketfile)

            logging.info("Starting nbd server on socket: %s", socketFile)
            try:
                nbdSrv = qFh.startNbdServer(args.output, socketFile)
                logging.info("NBD Server PID: %s", nbdSrv)
            except Exception as e:
                logging.error("Unable to start nbd server: %s", e)
                sys.exit(1)

            logging.info(
                "Waiting until nbd server on socket %s is up",
                socketFile
            )
            sleep(5)

            nbdClient = nbdhelper.nbdClient(
                meta["diskName"], None, socketFile
            )
            connection = nbdClient.connect()

            for restoreFile in restoreDisk:
                reader = open(restoreFile,"rb")
                kind, start, length = sparsestream.SparseStream().readFrame(
                    reader
                )
                meta = sparsestream.SparseStream().loadMetadata(reader.read(
                    length
                ))
                if meta["dataSize"] == 0:
                    logging.info(
                        "Saveset %s contains no dirty blocks, skipping",
                        restoreFile
                    )
                    continue
                logging.info(
                    "Applying data from file %s to %s/%s",
                    restoreFile,
                    args.output,
                    meta["diskName"]
                )
                pprint.pprint(meta)
                assert reader.read(
                    len(sparsestream.SparseStreamTypes().TERM)
                ) == sparsestream.SparseStreamTypes().TERM

                progressBar = tqdm(
                    total=meta["dataSize"],
                    desc="restoring disk %s" % meta["diskName"],
                    unit="B", unit_scale=True, disable=args.noprogress
                )
                dataSize = 0
                while True:
                    try:
                        kind, start, length = sparsestream.SparseStream().readFrame(
                            reader
                        )
                    except Exception as e:
                        logging.error(
                            "Unknown header at stream postition %s",
                            reader.tell()
                        )
                        sys.exit(1)
                    if kind == sparsestream.SparseStreamTypes().ZERO:
                        logging.debug(
                            "Write zero segment from %s length: %s",
                            start,
                            length
                        )
                        if length >= nbdClient.maxRequestSize:
                            logging.debug(
                                "Chunked zero, start: %s, len: %s",
                                start,
                                length
                            )
                            lib.zeroChunk(
                                start, length,
                                nbdClient.maxRequestSize, connection
                            )
                        else:
                            connection.zero(length, start)
                    elif kind == sparsestream.SparseStreamTypes().DATA:
                        logging.debug(
                            "Write data segment from %s length: %s",
                            start,
                            length
                        )
                        if length >= nbdClient.maxRequestSize:
                            logging.debug(
                                "Chunked read/write, start: %s, len: %s",
                                start, length
                            )
                            lib.readChunk(
                                reader, start, length,
                                nbdClient.maxRequestSize, connection
                            )
                        else:
                            data = reader.read(length)
                            connection.pwrite(data, start)
                        assert reader.read(
                            len(sparsestream.SparseStreamTypes().TERM)
                        ) == sparsestream.SparseStreamTypes().TERM
                        dataSize += length
                        progressBar.update(length)
                    elif kind == sparsestream.SparseStreamTypes().STOP:
                        progressBar.close()
                        if dataSize == meta["dataSize"]:
                            logging.info(
                                "End of stream, %s bytes of data processed",
                                dataSize
                            )
                        else:
                            logging.error(
                                "Error: restored data size %s != %s",
                                dataSize,
                                meta["dataSize"]
                            )
                            sys.exit(1)
                        break
                if meta["checkpointName"] == args.until:
                    logging.info("Reached checkpoint %s, stopping", args.until)
                    progressBar.close()
                    break

            nbdClient.disconnect()
            progressBar.close()

if __name__ == "__main__":
    main()
